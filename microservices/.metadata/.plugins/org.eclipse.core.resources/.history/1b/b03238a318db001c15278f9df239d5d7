package com.microservices.application.producer;

import java.util.Properties;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;

import com.exceptions.KafkaRuntimeException;
import com.microservices.application.serializer.BookingNotificationSerializer;
import com.models.BookingNotification;

public class Producer extends KafkaProducer<String, BookingNotification>{
//	private static Producer producer;
//	
//	private Producer(Properties properties) {
//		super(properties);
//	}
//	
//	public static synchronized Producer getInstance()
//    {
//        if (producer==null){
//        	try {
//        		
//        		System.out.println("Creating Kafka Producer Object");
//        		
//        		Properties properties = new Properties();
//            	properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");
//    			properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
//    			properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BookingNotificationSerializer.class.getName());
//    			properties.setProperty(ProducerConfig.TRANSACTIONAL_ID_CONFIG, "booking");
//    			
//    			/* Enable Idempotent Producer */
//    			properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, "true");
//    			properties.setProperty(ProducerConfig.ACKS_CONFIG, "all");
//    			properties.setProperty(ProducerConfig.RETRIES_CONFIG, Integer.toString(Integer.MAX_VALUE));
//    			
//    			/* Optimizing performance - compress, increasing linger time and setting batch size */
//    			properties.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, "snappy");
//    			properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, "20");
//    			properties.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, Integer.toString(32*1024));
//    			
//    			producer = new Producer(properties);
//        	}catch(Exception e) {
//    			throw new KafkaRuntimeException(e.getMessage());
//    		}
//        }
//        return producer;
//    }
	
	
	public Producer(Properties properties) {
		super(properties);
	}

	public static synchronized Producer getInstance()
    {
		System.out.println("Creating Kafka Producer Object");
		
		Properties properties = new Properties();
    	properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");
		properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
		properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, BookingNotificationSerializer.class.getName());
		properties.setProperty(ProducerConfig.TRANSACTIONAL_ID_CONFIG, "booking");
		
		/* Enable Idempotent Producer */
		properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, "true");
		properties.setProperty(ProducerConfig.ACKS_CONFIG, "all");
		properties.setProperty(ProducerConfig.RETRIES_CONFIG, Integer.toString(Integer.MAX_VALUE));
		
		/* Optimizing performance - compress, increasing linger time and setting batch size */
		properties.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, "snappy");
		properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, "20");
		properties.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, Integer.toString(32*1024));
		
		Producer producer = new Producer(properties);
        return producer;
    }
}


